name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  CACHE_IMAGE: zarzeczako/weather-cache:buildcache

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub (for cache)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GHCR (for final image)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and export to local tar (for Trivy scan)
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --cache-from type=registry,ref=${{ env.CACHE_IMAGE }} \
          --cache-to type=registry,ref=${{ env.CACHE_IMAGE }},mode=max \
          --output=type=docker,dest=image.tar \
          .

    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        input: image.tar
        exit-code: 1
        severity: CRITICAL,HIGH

  push-image:
    needs: build-and-scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub (for cache)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push image to GHCR
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --cache-from type=registry,ref=${{ env.CACHE_IMAGE }} \
          --cache-to type=registry,ref=${{ env.CACHE_IMAGE }},mode=max \
          --push \
          -t ${{ env.IMAGE_NAME }}:latest \
          .
